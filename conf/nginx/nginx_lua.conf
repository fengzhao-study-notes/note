
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;


	upstream prod {
		server 192.168.1.254:8081;
	}

	upstream test {
		server 192.168.1.254:8082;
	}

    server {
        listen       5566;
        server_name  192.168.1.254;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }

		location /lua {
			default_type text/html;
			content_by_lua 'ngx.say("hello world ")';
		}

		# get access client ip address
		location /lua_ip {
			default_type text/html;
			content_by_lua '
				cip = ngx.req.get_headers()["x_forworded_for"]
				if cip == nli then
					cip = ngx.var.remote_addr
					ngx.say(cip)
				end
			';
		}
        
        # get request headers
		location /lua_http {
			default_type text/html;
			content_by_lua '
				local args = ngx.req.get_headers()
				for i,v in pairs(args) do
					ngx.say(i," : ",v)
					ngx.say("<br>")
				end
				ngx.say("")
				local ua = ngx.var.http_user_agent
				if ua == nil then
				    ua = "unkonw"
				end
				ngx.say("User Agent: "..ua)
			';
		}

		# connect to redis server
		location /redis {
			default_type text/html;
			content_by_lua '
				local redis = require "resty.redis"
				local red = redis:new()
				
				red:set_timeout(1000)

				-- connect to redis-sever
				local ok,err = red:connect("192.168.1.201",6379)
				if not ok then
					ngx.say("connect failed",err)
					return
				end
				-- ngx.say("connect success")
				-- ngx.say("<br>")
				
				--[[
				-- set a key,value
				local ok,err = red:set("lua1","sfsfsx");
				if not ok then
					ngx.say("set k,v error")
				end

				local res,err = red:get("lua1")
				if not res then
					ngx.say("set k,v error")
				end
				ngx.say("lua1 :  ",res)
				--]]

                client_ip = ngx.req.get_headers()["x_forworded_for"]
                if client_ip == nli then
                    client_ip = ngx.var.remote_addr
                    -- ngx.say(cip)
                end
				
				local server,err = red:get(client_ip)
				if not server then
					ngx.say("get value error")
					return
				end
				-- ngx.say(server)
				if server == "1" then
					-- uri redirect
					ngx.exec("/prod")
					return
				end
					ngx.exec("/test")
					return
			';
		}

		location /prod {
			proxy_pass http://prod;
		}

		location /test {
			proxy_pass http://test;
		}
#		location /lua_ip {
#			default_type text/plain;
#			content_by_lua 'ngx.say("hello lua nginx")';
#			access_by_lua '
#				if ngx.var.remote_addr == "192.168.1.201" then
#					ngx.exit(ngx.HTTP_FORBIDDEN)
#				end
#
#			';
#
#				#if ngx.var.remote_addr == "192.168.1.103" then
#				#	ngx.exec("@client")
#				#end
#		}

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
